"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addClientModules = void 0;
const apis_1 = require("../apis");
const config_1 = require("../config");
const ts_type_1 = require("../ts-type");
const getClientTSTypeRefCount_1 = require("./getClientTSTypeRefCount");
const getNewExpressionCount_1 = require("./getNewExpressionCount");
const hasImportEquals_1 = require("./hasImportEquals");
const hasRequire_1 = require("./hasRequire");
const importEqualsModule = __importStar(require("./importEqualsModule"));
const importModule = __importStar(require("./importModule"));
const requireModule = __importStar(require("./requireModule"));
const addClientModules = (j, source, options) => {
    const { clientIdentifiers } = options;
    const { addClientDefaultModule, addClientNamedModule } = (0, hasRequire_1.hasRequire)(j, source)
        ? requireModule
        : (0, hasImportEquals_1.hasImportEquals)(j, source)
            ? importEqualsModule
            : importModule;
    const v3ClientTypesCount = (0, ts_type_1.getV3ClientTypesCount)(j, source, options);
    const newExpressionCount = (0, getNewExpressionCount_1.getNewExpressionCount)(j, source, options);
    const clientTSTypeRefCount = (0, getClientTSTypeRefCount_1.getClientTSTypeRefCount)(j, source, options);
    const waiterStates = (0, apis_1.getClientWaiterStates)(j, source, clientIdentifiers);
    // Add default import for types, if needed.
    if (v3ClientTypesCount > 0) {
        addClientDefaultModule(j, source, options);
    }
    if (newExpressionCount > 0 || clientTSTypeRefCount > 0) {
        addClientNamedModule(j, source, {
            ...options,
            importedName: options.v3ClientName,
            localName: options.v2ClientLocalName,
        });
    }
    for (const waiterState of waiterStates) {
        const v3WaiterApiName = (0, apis_1.getV3ClientWaiterApiName)(waiterState);
        addClientNamedModule(j, source, {
            ...options,
            importedName: v3WaiterApiName,
        });
    }
    if (options.v2ClientName === config_1.S3) {
        if ((0, apis_1.isS3UploadApiUsed)(j, source, clientIdentifiers)) {
            addClientNamedModule(j, source, {
                ...options,
                importedName: "Upload",
                v3ClientPackageName: "@aws-sdk/lib-storage",
            });
        }
        if ((0, apis_1.isS3GetSignedUrlApiUsed)(j, source, clientIdentifiers)) {
            addClientNamedModule(j, source, {
                ...options,
                importedName: "getSignedUrl",
                v3ClientPackageName: "@aws-sdk/s3-request-presigner",
            });
            for (const apiName of (0, apis_1.getS3SignedUrlApiNames)(j, source, clientIdentifiers)) {
                addClientNamedModule(j, source, {
                    ...options,
                    importedName: (0, apis_1.getCommandName)(apiName),
                });
            }
        }
    }
    if (options.v2ClientName === config_1.DYNAMODB) {
        const { v2ClientLocalName } = options;
        const docClientOptions = {
            ...options,
            v2ClientName: config_1.DYNAMODB_DOCUMENT_CLIENT,
            ...(v2ClientLocalName && {
                v2ClientLocalName: `${v2ClientLocalName}.${config_1.DOCUMENT_CLIENT}`,
            }),
        };
        const docClientTypesCount = (0, ts_type_1.getV3ClientTypesCount)(j, source, docClientOptions);
        const docClientNewExpressionCount = (0, getNewExpressionCount_1.getNewExpressionCount)(j, source, docClientOptions);
        const docClientModuleOptions = {
            ...options,
            v2ClientLocalName: `${v2ClientLocalName}.${config_1.DOCUMENT_CLIENT}`,
            v3ClientPackageName: "@aws-sdk/lib-dynamodb",
        };
        // Add default import for types, if needed.
        if (docClientTypesCount > 0) {
            addClientDefaultModule(j, source, docClientModuleOptions);
        }
        if (docClientNewExpressionCount > 0) {
            addClientNamedModule(j, source, {
                ...docClientModuleOptions,
                importedName: config_1.DYNAMODB_DOCUMENT,
            });
        }
    }
};
exports.addClientModules = addClientModules;
