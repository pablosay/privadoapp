"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addClientNamedModule = void 0;
const utils_1 = require("../../utils");
const getImportEqualsDeclarationType_1 = require("../getImportEqualsDeclarationType");
const getImportEqualsLocalNameSuffix_1 = require("../getImportEqualsLocalNameSuffix");
const getRequireProperty_1 = require("../getRequireProperty");
const objectPatternPropertyCompareFn_1 = require("../objectPatternPropertyCompareFn");
const addClientDefaultModule_1 = require("./addClientDefaultModule");
const addClientNamedModule = (j, source, options) => {
    const { importedName, localName, ...v3ClientModulesOptions } = options;
    const { v2ClientName, v3ClientPackageName } = v3ClientModulesOptions;
    const localNameSuffix = (0, getImportEqualsLocalNameSuffix_1.getImportEqualsLocalNameSuffix)(v2ClientName, v3ClientPackageName);
    const defaultLocalName = (0, utils_1.getDefaultLocalName)(localNameSuffix);
    const namedImportObjectProperty = (0, getRequireProperty_1.getRequireProperty)(j, { importedName, localName });
    const existingVarDeclarator = source.find(j.VariableDeclarator, {
        type: "VariableDeclarator",
        init: { type: "Identifier", name: defaultLocalName },
    });
    if (existingVarDeclarator.size()) {
        const firstDeclaratorProperties = existingVarDeclarator.get(0).node.id.properties;
        firstDeclaratorProperties.push(namedImportObjectProperty);
        firstDeclaratorProperties.sort(objectPatternPropertyCompareFn_1.objectPatternPropertyCompareFn);
        return;
    }
    const importEqualsDeclaration = (0, getImportEqualsDeclarationType_1.getImportEqualsDeclarationType)(v3ClientPackageName);
    if (source.find(j.TSImportEqualsDeclaration, importEqualsDeclaration).size() === 0) {
        (0, addClientDefaultModule_1.addClientDefaultModule)(j, source, v3ClientModulesOptions);
    }
    const varDeclaration = j.variableDeclaration("const", [
        j.variableDeclarator(j.objectPattern([namedImportObjectProperty]), j.identifier(defaultLocalName)),
    ]);
    const v3ClientImportEquals = source
        .find(j.TSImportEqualsDeclaration, importEqualsDeclaration)
        .filter((importEqualsDeclaration) => importEqualsDeclaration.value.id.name === defaultLocalName);
    if (v3ClientImportEquals.size() > 0) {
        v3ClientImportEquals.at(0).insertAfter(varDeclaration);
        return;
    }
    // Unreachable code, throw error
    throw new Error("The named import equals can't exist on it's own.\n" +
        "Please report your use case on https://github.com/awslabs/aws-sdk-js-codemod");
};
exports.addClientNamedModule = addClientNamedModule;
