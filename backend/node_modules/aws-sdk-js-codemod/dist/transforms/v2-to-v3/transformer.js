"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parser = void 0;
const apis_1 = require("./apis");
const aws_util_1 = require("./aws-util");
const client_instances_1 = require("./client-instances");
const client_names_1 = require("./client-names");
const config_1 = require("./config");
const modules_1 = require("./modules");
const ts_type_1 = require("./ts-type");
const utils_1 = require("./utils");
const transformer = async (file, api) => {
    const j = (0, utils_1.isTypeScriptFile)(file.path) ? api.jscodeshift.withParser("ts") : api.jscodeshift;
    const source = j(file.source);
    (0, apis_1.addNotSupportedComments)(j, source);
    const v2GlobalName = (0, modules_1.getGlobalNameFromModule)(j, source);
    const v2ClientNamesRecord = (0, client_names_1.getClientNamesRecord)(j, source);
    if (!v2GlobalName && Object.keys(v2ClientNamesRecord).length === 0) {
        return source.toSource();
    }
    if (v2GlobalName) {
        for (const v2ClientNameFromGlobal of (0, client_names_1.getClientNamesFromGlobal)(j, source, v2GlobalName)) {
            if (!(v2ClientNameFromGlobal in v2ClientNamesRecord)) {
                v2ClientNamesRecord[v2ClientNameFromGlobal] = v2ClientNameFromGlobal;
            }
        }
    }
    const clientMetadataRecord = (0, client_names_1.getClientMetadataRecord)(v2ClientNamesRecord);
    const clientIdentifiersRecord = (0, apis_1.getClientIdentifiersRecord)(j, source, {
        v2GlobalName,
        v2ClientNamesRecord,
    });
    for (const v2ClientName of Object.keys(clientMetadataRecord)) {
        const clientIdentifiers = clientIdentifiersRecord[v2ClientName];
        (0, apis_1.addNotSupportedClientComments)(j, source, { v2ClientName, clientIdentifiers });
    }
    if (source.toSource() !== file.source) {
        return source.toSource();
    }
    for (const [v2ClientName, v3ClientMetadata] of Object.entries(clientMetadataRecord)) {
        const clientIdentifiers = clientIdentifiersRecord[v2ClientName];
        const { v2ClientLocalName, v3ClientName, v3ClientPackageName } = v3ClientMetadata;
        const v2Options = { v2ClientName, v2ClientLocalName, v2GlobalName };
        const v3Options = { v3ClientName, v3ClientPackageName };
        (0, modules_1.addClientModules)(j, source, { ...v2Options, ...v3Options, clientIdentifiers });
        (0, ts_type_1.replaceTSQualifiedName)(j, source, { ...v2Options, v3ClientName });
        (0, modules_1.removeClientModule)(j, source, v2Options);
        if (v2ClientName === config_1.S3) {
            // Needs to be called before removing promise calls, as replacement has `.done()` call.
            (0, apis_1.replaceS3UploadApi)(j, source, clientIdentifiers);
        }
        (0, apis_1.removePromiseCalls)(j, source, clientIdentifiers);
        if (v2ClientName === config_1.S3) {
            (0, apis_1.replaceS3GetSignedUrlApi)(j, source, clientIdentifiers);
        }
        (0, apis_1.replaceWaiterApi)(j, source, clientIdentifiers);
        (0, client_instances_1.replaceClientCreation)(j, source, v2Options);
        (0, client_instances_1.replaceDocClientCreation)(j, source, v2Options);
    }
    (0, aws_util_1.replaceAwsUtilFunctions)(j, source, v2GlobalName);
    (0, modules_1.removeGlobalModule)(j, source, v2GlobalName);
    return source.toSource();
};
exports.default = transformer;
exports.parser = "babylon";
