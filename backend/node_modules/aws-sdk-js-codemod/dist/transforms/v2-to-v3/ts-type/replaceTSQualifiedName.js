"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceTSQualifiedName = void 0;
const config_1 = require("../config");
const getClientTypeNames_1 = require("./getClientTypeNames");
const getTSQualifiedNameFromClientName_1 = require("./getTSQualifiedNameFromClientName");
const getV3ClientType_1 = require("./getV3ClientType");
const updateV2ClientType_1 = require("./updateV2ClientType");
const isRightSectionIdentifier = (node) => node.right.type === "Identifier";
const getRightIdentifierName = (node) => node.right.name;
const isParentTSQualifiedName = (node) => node.parentPath?.value.type === "TSQualifiedName";
// Replace v2 client type reference with v3 client type reference.
const replaceTSQualifiedName = (j, source, options) => {
    const { v2ClientName, v2ClientLocalName, v2GlobalName, v3ClientName } = options;
    if (v2GlobalName) {
        // Replace type reference to client created with global name.
        source
            .find(j.TSQualifiedName, (0, getTSQualifiedNameFromClientName_1.getTSQualifiedNameFromClientName)(v2GlobalName, v2ClientName))
            .filter((v2ClientType) => !isParentTSQualifiedName(v2ClientType))
            .replaceWith(() => j.tsTypeReference(j.identifier(v3ClientName)));
        // Replace reference to client types created with global name.
        source
            .find(j.TSQualifiedName, {
            left: (0, getTSQualifiedNameFromClientName_1.getTSQualifiedNameFromClientName)(v2GlobalName, v2ClientName),
        })
            .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node) && !isParentTSQualifiedName(v2ClientType))
            .forEach((v2ClientType) => {
            const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
            (0, updateV2ClientType_1.updateV2ClientType)(j, v2ClientType, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
        });
    }
    const [clientNamePrefix, clientNameSuffix] = v2ClientLocalName.split(".");
    // Replace reference to client types created with client module.
    source
        .find(j.TSQualifiedName, {
        ...(clientNameSuffix
            ? {
                left: {
                    left: { type: "Identifier", name: clientNamePrefix },
                    right: { type: "Identifier", name: clientNameSuffix },
                },
            }
            : { left: { type: "Identifier", name: clientNamePrefix } }),
    })
        .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node) && !isParentTSQualifiedName(v2ClientType))
        .forEach((v2ClientType) => {
        const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
        (0, updateV2ClientType_1.updateV2ClientType)(j, v2ClientType, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
    });
    // Replace type reference to client type with modules.
    const clientTypeNames = (0, getClientTypeNames_1.getClientTypeNames)(j, source, {
        v2ClientLocalName,
        v2ClientName,
        v2GlobalName,
    });
    for (const clientTypeName of clientTypeNames) {
        source
            .find(j.Identifier, { name: clientTypeName })
            .filter((v2ClientType) => !["TSQualifiedName", "ImportSpecifier"].includes(v2ClientType.parentPath?.value.type))
            .replaceWith((v2ClientType) => {
            const v2ClientTypeName = v2ClientType.node.name;
            return (0, getV3ClientType_1.getV3ClientType)(j, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
        });
    }
    if (v2ClientName === config_1.DYNAMODB) {
        (0, exports.replaceTSQualifiedName)(j, source, {
            ...options,
            v2ClientName: config_1.DYNAMODB_DOCUMENT_CLIENT,
            v2ClientLocalName: `${v2ClientLocalName}.${config_1.DOCUMENT_CLIENT}`,
        });
    }
};
exports.replaceTSQualifiedName = replaceTSQualifiedName;
